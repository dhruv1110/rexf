name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine pytest pytest-cov
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 rexf --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. Using max-line-length=100 to match black
        flake8 rexf --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Format check with black
      run: |
        black --check --diff rexf/

    - name: Import sorting check with isort
      run: |
        isort --check-only --diff rexf/

    - name: Type checking with mypy
      run: |
        mypy rexf/ --ignore-missing-imports --disable-error-code=attr-defined,no-untyped-def,var-annotated,assignment,arg-type,no-any-return,index,misc,truthy-function,operator,import-untyped || true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=rexf --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for security vulnerabilities
      run: |
        pip install -e .
        safety check

    - name: Run bandit security scan
      run: |
        bandit -r rexf/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json
